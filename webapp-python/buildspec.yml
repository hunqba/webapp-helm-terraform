version: 0.2

env:
  #variables:
     # key: "value"
     # key: "value"
  #parameter-store:
     # key: "value"
     # key: "value"
  #secrets-manager:
     # key: secret-id:json-key:version-stage:version-id
     # key: secret-id:json-key:version-stage:version-id
  exported-variables:
     - IMAGE
     # - variable
  #git-credential-helper: yes
#batch:
  #fast-fail: true
  #build-list:
  #build-matrix:
  #build-graph:
phases:
  install:
    #If you use the Ubuntu standard image 2.0 or later, you must specify runtime-versions.
    #If you specify runtime-versions and use an image other than Ubuntu standard image 2.0, the build fails.
    #runtime-versions:
      # name: version
      # name: version
    commands:
      - echo Setting up docker
      # - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2 &
      - timeout 5 sh -c "until docker info; do echo .; sleep 1; done"
      # - command
  pre_build:
    commands:
            # Logging in to Amazon ECR...
      - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --output text --query 'Account')
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - BUILD_ID=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
      # - IMAGE_TAG=$(echo $IMAGE_TAG_PREFIX"-"$BUILD_ID)
      - IMAGE_TAG='latest'
      - ACCESS_KEY=$ACCESS_KEY
      - ACCESS_SECRET_KEY=$ACCESS_SECRET_KEY
      - cat $ACCESS_KEY >> .env
  build:
    commands:
      - echo Build started on $(date)     
      - docker build --platform=linux/amd64 -t $REPOSITORY_URI:$IMAGE_TAG .
      # - command
  post_build:
    commands:
      - echo Build completed on $(date)
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      # - IMAGE=$REPOSITORY_URI:$IMAGE_TAG
      # - printf '{"ImageURI":"'"$IMAGE"'"}' > imageDetail.json
#reports:
  #report-name-or-arn:
    #files:
      # - location
      # - location
    #base-directory: location
    #discard-paths: yes
    #file-format: JunitXml | CucumberJson
artifacts:
  files:
    - ./appspec.yml
    - ./taskdef.json
  # name: $(date +%Y-%m-%d)
  # discard-paths: yes
  # base-directory: location
#cache:
  #paths:
    # - paths